# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import db_service_metadata_pb2 as db__service__metadata__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class MetadataServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.syncMetadatas = channel.unary_unary(
        '/io.lightcone.services.metadata_service.MetadataService/syncMetadatas',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.getTokens = channel.unary_unary(
        '/io.lightcone.services.metadata_service.MetadataService/getTokens',
        request_serializer=db__service__metadata__pb2.GetTokensReq.SerializeToString,
        response_deserializer=db__service__metadata__pb2.GetTokensRes.FromString,
        )
    self.getMarkets = channel.unary_unary(
        '/io.lightcone.services.metadata_service.MetadataService/getMarkets',
        request_serializer=db__service__metadata__pb2.GetMarketsReq.SerializeToString,
        response_deserializer=db__service__metadata__pb2.GetMarketsRes.FromString,
        )
    self.getCurrencies = channel.unary_unary(
        '/io.lightcone.services.metadata_service.MetadataService/getCurrencies',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=db__service__metadata__pb2.GetCurrenciesRes.FromString,
        )


class MetadataServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def syncMetadatas(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getTokens(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getMarkets(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getCurrencies(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MetadataServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'syncMetadatas': grpc.unary_unary_rpc_method_handler(
          servicer.syncMetadatas,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'getTokens': grpc.unary_unary_rpc_method_handler(
          servicer.getTokens,
          request_deserializer=db__service__metadata__pb2.GetTokensReq.FromString,
          response_serializer=db__service__metadata__pb2.GetTokensRes.SerializeToString,
      ),
      'getMarkets': grpc.unary_unary_rpc_method_handler(
          servicer.getMarkets,
          request_deserializer=db__service__metadata__pb2.GetMarketsReq.FromString,
          response_serializer=db__service__metadata__pb2.GetMarketsRes.SerializeToString,
      ),
      'getCurrencies': grpc.unary_unary_rpc_method_handler(
          servicer.getCurrencies,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=db__service__metadata__pb2.GetCurrenciesRes.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'io.lightcone.services.metadata_service.MetadataService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
